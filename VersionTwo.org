* Version Two
  This is our chance to make backwards-incompatible restructurings and
  refactorings, so let's make the most of it. Brainstorm here.

* Ideas
  - [[https://github.com/technomancy/leiningen/wiki/Project-Middleware][project middleware]]

* Open Questions
  - dev as a bit vs arbitrary environments/profiles
    - what is an environment? what varies?
      - arbitrary defproject keys
        - classpath entries should compose by concatenation
        - everything else by replacement?
      - auto-activated profiles per-jdk-version?
      - removing dev-deps means that lein plugins need to be listed separately
      - where can profiles be defined?
        - per-project basis: in project.clj or separate file?
        - per-user basis: maybe ~/.lein/profiles.clj
  - Do people use shell wrappers?
  - Do we need to keep maven around for pom generation?
    - Is it feasible to just use simple XML generation?
    - We could scavenge the code from [[https://github.com/flatland/depot/blob/develop/src/depot/pom.clj][depot.pom]] for this, or move it into [[https://github.com/cemerick/pomegranate][pomegranate]].
      - If Chas thinks this is appropriate for pomegranate then let's do this.
  - nREPL?
    - the only issue here would be if Leiningen adds an implicit dev
      dependency on nrepl it could conflict with whatever version of
      nrepl that the user wants for himself. right now the repl server
      is just a big form that gets evaled without causing any defs,
      which has its advantages.
  - optional persistent jvm using =lein start= and =lein stop=?
    - possibly, if we evaluate jark and find we need something beyond it.
  - installation process?
  - switch :repositories to a vector rather than a map?
  - relative paths in *-path in defproject forms?
  - target java 1.6/1.5 bytecode from 1.7?

* Internal Changes
  - Upgrade to Clojure 1.3
  - Switch from maven-ant-tasks to aether via pomegranate
    Should allow us to clean up a lot.
  - Place all artifacts inside target/ directory
  - Require a project argument for all tasks
    even ones that run outside a project; determine if project is
    required via metadata instead of inspecting arglists
  - No one knows what can go into =init.clj=. Two options AFAICT:
    - Document the hell out of it (as with =sample.project.clj=)
    - Look for metadata on functions that indicates =init.clj= usage/dependency that can drive automated production of documentation â€” both for lein itself _and_ plugins.  e.g. =^{:init.clj {:var 'lein-beanstalk-credentials :keys [[:aws :access-key] [:aws :secret-key]]}}=
  - More extensive test suite; tests covering the code in shell/batch scripts

* Features
  - Run projects inside in-process subclassloader
    - using [[github.com/flatland/classlojure][classlojure]] and perhaps some of cake's [[https://github.com/flatland/cake/blob/develop/src/cake/classloader.clj][bake macros]]?
    - allow for :eval-in :subprocess or :eval-in :leiningen
    - recalculate dependencies without restarting (pomegranate style)
  - Support classifiers to specify Clojure versions?
  - Non-transitive AOT when possible (1.4+)
  - =lein compile :lint= to turn on reflection warnings etc.
    - =lein check= based on [[https://github.com/flatland/cake/blob/develop/src/cake/tasks/check.clj][cake check]]?
  - Namespace-level test selectors
    - we can port whatever features are desired from [[https://github.com/flatland/cake/blob/develop/src/cake/tasks/test.clj][cake test]] including namespace and tag selectors
  - Allow more extensible jarring multimethods
    [[http://groups.google.com/group/leiningen/browse_thread/thread/50b1198e2fbd0d6b]]
  - [[https://github.com/technomancy/leiningen/issues/271][Explicit support for repository mirrors/proxies]]
  - Improved repl client?
    - See Colin's promising https://github.com/trptcolin/reply
  - Spin off leiningen-core library
    - Who will use this?
    - What should be moved?
      - classpath calculation
      - eval-in-project
        - is leiningen.compile/prep going to be a problem?
      - read-project
      - user-settings?
      - repositories-for
      - find-deps-files
  - Templates for new projects (a la spawn plugin)
  - Allow tasks to declare themselves as idempotent
  - A flag to disable leiningen.util.injected entirely

* Deprecations
  - Consider dropping Ant as a dependency.
    (might need it for javac task)
  - :local-repo-classpath by default
  - Dependency checksum mismatch should cause failure by default
  - Remove symlink lib option
  - Remove test! task
  - Remove bundled lancet
  - Remove :test-resources-path and :jar-dir
  - Remove special-casing for group-id for org.clojure deps
  - Spin off repl socket server into a plugin?
    - or just use nrepl?
  - Deprecate interactive task in favour of Jark?
    (assuming Jark is ready)
  - Drop Clojars snapshots from default repo list
